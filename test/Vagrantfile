require 'yaml'
require 'fileutils'

Vagrant.configure('2') do |config|
  # ----------------------------------------------------------------------------
  # Load configuration
  # ----------------------------------------------------------------------------
  settings = YAML.load(File.read('.vagrant.config.yml'))

  # ----------------------------------------------------------------------------
  # Configure the machine
  # ----------------------------------------------------------------------------
  config.vm.box = 'debian-docker-local'

  config.vm.provider 'virtualbox' do |vb|
    # Set the name to show in the GUI
    if settings and settings['vm'] and settings['vm']['name']
      vb.name = settings['vm']['name']
    elsif settings and settings['network'] and settings['network']['hostname']
      vb.name = settings['network']['hostname']
    end

    # Set the CPU limit
    if settings and settings['vm'] and settings['vm']['cpus']
      vb.cpus = settings['vm']['cpus']
    end
    # Set the amount of memory to allocate to the VM
    if settings and settings['vm'] and settings['vm']['memory']
      vb.memory = settings['vm']['memory']
    end

    # Fixes "DNS Not Working"
    # See http://serverfault.com/questions/453185/vagrant-virtualbox-dns-10-0-2-3-not-working?rq=1
    vb.customize ['modifyvm', :id, '--natdnshostresolver1', 'on']
  end

  if Vagrant.has_plugin?('vagrant-vbguest')
    # Temporary until base box is updated (see https://github.com/dotless-de/vagrant-vbguest/issues/351)
    # Fixes "Got different reports about installed GuestAdditions version"
    config.vbguest.auto_update = false
  end

  # ----------------------------------------------------------------------------
  # Configure the network
  # ----------------------------------------------------------------------------
  # Set the main hostname
  if settings and settings['network'] and settings['network']['hostname']
    config.vm.hostname = settings['network']['hostname']
  end
  # Add alternative hostnames
  if Vagrant.has_plugin?('vagrant-hostsupdater')
    if settings and settings['network'] and settings['network']['aliases']
      config.hostsupdater.aliases = settings['network']['aliases']
    end
  end

  # Define main IP address
  if settings and settings['network'] and settings['network']['ip']
    config.vm.network 'private_network', ip: settings['network']['ip']

    if Vagrant.has_plugin?('vagrant-notify-forwarder')
      # This configures the notify-forwarder to a port derived from the IP
      # address to ensure that all running boxes have a different port
      config.notify_forwarder.port = 22000 + settings['network']['ip'].split('.')[2].to_i() + settings['network']['ip'].split('.')[3].to_i()
    end
  else
    config.vm.network 'private_network', type: 'dhcp'
  end

  # ----------------------------------------------------------------------------
  # Configure the synced folders
  # ----------------------------------------------------------------------------
  if settings and settings['folder'] and settings['folder']['type'] == 'nfs'
    config.vm.synced_folder '.', '/vagrant',
      type: 'nfs',
      #nfs_version: 3, # TODO: Enable? Update to NFSv4
      nfs_udp: false, # UDP not allowed in NFSv4
      mount_options: ['rw', 'tcp', 'nolock', 'async']
    config.nfs.map_uid = Process.uid
    config.nfs.map_gid = Process.gid
  elsif settings and settings['folder'] and settings['folder']['type'] == 'rsync'
    config.vm.synced_folder '.', '/vagrant',
      type: 'rsync',
      rsync__args: ['--verbose', '--archive', '--delete', '-z'],
      rsync__chown: true,
      rsync__exclude: settings ? settings['folder'] ? settings['folder']['rsync'] ? settings['folder']['rsync']['exclude'] : [] : [] : []

    # An rsync watcher for Vagrant 1.5.1+ that uses fewer host resources at
    # the potential cost of more rsync actions.
    # Configure the window for gatling to coalesce writes.
    if Vagrant.has_plugin?('vagrant-gatling-rsync')
      config.gatling.latency = 1.5
      config.gatling.time_format = '%H:%M:%S'
      #config.gatling.rsync_on_startup = false #Â TODO: Enable? Needed?

      # Automatically sync when machines with rsync folders come up.
      config.gatling.rsync_on_startup = false
    end
  else
    config.vm.synced_folder '.', '/vagrant'
  end

  if settings and settings['folder'] and settings['folder']['docker'] and settings['folder']['docker']['build_cache']
    dirname = File.dirname(File.expand_path(settings['folder']['docker']['build_cache'] + '/x'))
    unless File.directory?(dirname)
      FileUtils.mkdir_p(dirname)
    end
    config.vm.provision 'create-build-cache-folder', type: 'shell', privileged: false, inline: <<-SCRIPT
      mkdir -p ~/.docker/cache/build
    SCRIPT
    if settings and settings['folder'] and settings['folder']['type'] == 'nfs'
      config.vm.synced_folder settings['folder']['docker']['build_cache'], '/home/vagrant/.docker/cache/build',
        type: 'nfs',
        #nfs_version: 3, # TODO: Enable? Update to NFSv4
        nfs_udp: false, # UDP not allowed in NFSv4
        mount_options: ['rw', 'tcp', 'nolock', 'async']
    end
    config.vm.provision 'fix-docker-permission', type: 'shell', privileged: false, inline: <<-SCRIPT
      sudo chown vagrant:vagrant ~/.docker ~/.docker/cache
    SCRIPT
  end

  #if settings and settings['folder'] and settings['folder']['docker'] and settings['folder']['docker']['image_cache']
  #  dirname = File.dirname(File.expand_path(settings['folder']['docker']['image_cache'] + '/x'))
  #  unless File.directory?(dirname)
  #    FileUtils.mkdir_p(dirname)
  #  end
  #  if settings and settings['folder'] and settings['folder']['type'] == 'nfs'
  #    #config.vm.synced_folder settings['folder']['docker']['image_cache'], '/var/lib/docker/overlay2',
  #    config.vm.synced_folder settings['folder']['docker']['image_cache'], '/var/lib/docker',
  #      type: 'nfs',
  #      #nfs_version: 3, # TODO: Enable? Update to NFSv4
  #      nfs_udp: false, # UDP not allowed in NFSv4
  #      mount_options: ['rw', 'tcp', 'nolock', 'async']
  #  end
  #end

  # ----------------------------------------------------------------------------
  # Provision the machine
  # ----------------------------------------------------------------------------
  # Copy the SSH key of the host system user to the box to allow Git access
  # ECDSA: $ ssh-keygen -t ed25519 -C "your_email@example.com"
  # RSA:   $ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
  if settings and settings['ssh'] and File.file?(File.expand_path(settings['ssh']['private_key'])) and File.file?(File.expand_path(settings['ssh']['public_key']))
    config.vm.provision 'file', source: settings['ssh']['private_key'], destination: '~/.ssh/id_ssh', run: 'always'
    config.vm.provision 'file', source: settings['ssh']['public_key'], destination: '~/.ssh/id_ssh.pub', run: 'always'
  elsif File.file?(File.expand_path('~/.ssh/id_ed25519')) && File.file?(File.expand_path('~/.ssh/id_ed25519.pub'))
    config.vm.provision 'file', source: '~/.ssh/id_ed25519', destination: '~/.ssh/id_ed25519', run: 'always'
    config.vm.provision 'file', source: '~/.ssh/id_ed25519.pub', destination: '~/.ssh/id_ed25519.pub', run: 'always'
  elsif File.file?(File.expand_path('~/.ssh/id_rsa')) && File.file?(File.expand_path('~/.ssh/id_rsa.pub'))
    config.vm.provision 'file', source: '~/.ssh/id_rsa', destination: '~/.ssh/id_rsa', run: 'always'
    config.vm.provision 'file', source: '~/.ssh/id_rsa.pub', destination: '~/.ssh/id_rsa.pub', run: 'always'
  end

  # Login to Docker Hub
  class DockerUsername
    def to_s
      print "Please enter your Docker credentials (the same as for https://hub.docker.com/)\n"
      print 'Username: '
      STDIN.gets.chomp
    end
  end
  class DockerPassword
    def to_s
      begin
      system 'stty -echo'
      print 'Password: '
      map = {'"' => '%22', '#' => '%23', '^' => '25%5E' }
      re = Regexp.new(map.keys.map { |x| Regexp.escape(x) }.join('|'))
      pass = STDIN.gets.chomp.gsub(re, map)
      ensure
      system 'stty echo'
      end
      pass
    end
  end
  #config.vm.provision 'setup', type: 'shell', privileged: false, inline: <<-SCRIPT
  #  gpg --batch --passphrase '' --quick-generate-key "Generated Key (Do Not Use) <generated@example.com>" rsa4096 cert never
  #  pass init generated@example.com
  #  cat 'pass is initialized' | pass insert -e docker-credential-helpers/docker-pass-initialized-check
  #SCRIPT

  config.vm.provision 'docker-login', type: 'shell', privileged: false, env: {'USERNAME' => DockerUsername.new, 'PASSWORD' => DockerPassword.new}, inline: <<-SCRIPT
    docker login --username "${USERNAME:-}" --password "${PASSWORD:-}"
  SCRIPT

  # Optionally: Build the application with "vagrant up --provision-with build"
  config.vm.provision 'build', type: 'shell', privileged: false, run: 'never', inline: <<-SCRIPT
    cd /vagrant
    # TODO: Build using BuildX
    docker buildx build --platform linux/amd64,linux/arm64,linux/riscv64 .
  SCRIPT

  # This one setups the application for local development (runs once on initial setup)
  if File.file?('./.vagrant/post-setup.sh')
    config.vm.provision 'post-setup', type: 'shell', privileged: false, path: './.vagrant/post-setup.sh'
  end

  # This one is always run to start the docker containers (runs on each start)
  if File.file?('./.vagrant/post-boot.sh')
    config.vm.provision 'post-boot', type: 'shell', privileged: false, run: 'always', path: './.vagrant/post-boot.sh'
  end

  if settings and settings['network'] and settings['network']['hostname']
    config.vm.post_up_message = 'Machine was booted, startup scripts are running inside the docker containers - please wait. If you\'re curious, you can execute "docker logs -t fpm" inside vagrant. Once finished, the application will be available on https://' + settings['network']['hostname']
  else
    config.vm.post_up_message = 'Machine was booted, startup scripts are running inside the docker containers - please wait. If you\'re curious, you can execute "docker logs -t fpm" inside vagrant.'
  end

  if Gem::Version.new(Vagrant::VERSION) >= Gem::Version.new('2.1.0')
    #config.trigger.after :up do |trigger|
    #  trigger.name = 'Start Containers'
    #  trigger.info = 'Starting Docker containers...'
    #  trigger.run_remote = { inline: 'cd /vagrant; if [ -f compose.yml ]; then docker compose up; fi' }
    #end
    #config.trigger.before :halt do |trigger|
    #  trigger.name = 'Stop Containers'
    #  trigger.info = 'Stopping Docker containers...'
    #  trigger.run_remote = { inline: 'cd /vagrant; if [ -f compose.yml ]; then docker compose down; fi' }
    #end
  end
end
